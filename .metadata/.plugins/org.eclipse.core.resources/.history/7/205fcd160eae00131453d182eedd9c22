package com.example.appqueology;

import java.security.acl.Owner;

import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.Point;
import android.graphics.PointF;
import android.graphics.RectF;
import android.view.DragEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.View.OnDragListener;
import android.webkit.WebView;
import android.webkit.WebView.FindListener;
import android.widget.RelativeLayout;

public class OnDragArtifact implements OnDragListener{
	
	public OnDragArtifact() {
		// TODO Auto-generated constructor stub
	}
	
	@Override
	public boolean onDrag(View v, DragEvent event) {
		
		switch (event.getAction()) {
			case DragEvent.ACTION_DRAG_STARTED:
			  break;
			case DragEvent.ACTION_DRAG_ENTERED:
			  break;
			case DragEvent.ACTION_DRAG_EXITED:        
			  break;
			case DragEvent.ACTION_DROP:
				Artifact touchedArtifact = (Artifact) event.getLocalState();
				View owner = (View)touchedArtifact.getParent();
				if(v != owner){//if the drag and drop started at a SlideDrawer Artifact
					if(event.getX() > owner.getWidth()){//Check if it has been dropped to main frame
						Artifact square = new Artifact(v.getContext());//then create a new Artifact at the main frame where it was dropped
						square.setX(event.getX());
				        square.setY(event.getY());
				        square.setBackgroundColor(Color.BLACK);
				        RelativeLayout Rel = (RelativeLayout)v;
				        Rel.addView(square,100,100);
				        touchedArtifact.setBackgroundColor(Color.BLACK);
				        touchedArtifact.setTag("node");
				        
				        
					}else{//else 
						touchedArtifact.setBackgroundColor(Color.BLACK);
					}

					View slideDrawer = (View)owner.getParent();//ensure the SlideDrawer overlaps all the views
					slideDrawer.bringToFront();
					
				}else{
					RelativeLayout Rel = (RelativeLayout)v;
					touchedArtifact.setX(event.getX()-touchedArtifact.getWidth()/2);
					touchedArtifact.setY(event.getY()-touchedArtifact.getHeight()/2);
					touchedArtifact.setBackgroundColor(Color.BLACK);
					recalculateLines(Rel);
					Line line = new Line(Rel.getContext(),new PointF(0,0),new PointF(touchedArtifact.getCenterX(),touchedArtifact.getCenterY()));
					line.setTag("line");
					Rel.addView(line);

					touchedArtifact.bringToFront();
					
					View slideDrawer = (View)Rel.findViewById(R.id.slidingDrawer);//ensure the SlideDrawer overlaps all the views
					slideDrawer.bringToFront();
					
				}
	
			  break;
			case DragEvent.ACTION_DRAG_ENDED:
			  default:
			  break;
		}
		return true;
			
	}
	
	public void recalculateLines(RelativeLayout Rel){
		while(Rel.findViewWithTag("line") != null){
			Rel.removeView(Rel.findViewWithTag("line"));
		}
		
		for(int i=0;i<Rel.getChildCount();i++){
			View maybeFather = Rel.getChildAt(i);
			if(maybeFather.getTag().toString().compareTo("node")
	}

}

package com.example.appqueology;

import java.io.Serializable;
import java.security.acl.Owner;
import java.util.ArrayList;
import java.util.Timer;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.Point;
import android.graphics.PointF;
import android.graphics.RectF;
import android.os.Parcelable;
import android.util.Log;
import android.view.DragEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.View.OnDragListener;
import android.webkit.WebView;
import android.webkit.WebView.FindListener;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;

/**
 * 
 * @author Joaquim Fornaguera
 * 
 * this custom OnDragListener that implements the drag and drop of the artifact views. From the slidingDrawer to create a new node
 * and for the creation of a new artifact, from the board to move the artifact. 
 * 
 * Also detects the long click to modify an artifact properties 
 * 
 * Is set at the graph RelativeLayout of MainActivity class 
 *
 */
public class OnDragArtifact implements OnDragListener{
	float startX,startY;
	public OnDragArtifact() {
		// TODO Auto-generated constructor stub
	}
	
	@Override
	public boolean onDrag(View v, DragEvent event) {
		Artifact touchedArtifact = (Artifact) event.getLocalState();
		RelativeLayout Main = (RelativeLayout)v.getParent();
		View sladingDrawer = Main.findViewById(R.id.content);
		View owner = (View)touchedArtifact.getParent();
		switch (event.getAction()) {
			case DragEvent.ACTION_DRAG_STARTED://when the artifact launches its drag action
				if(v == owner){//if the drag event is started by an artifact on the graph board we disable the slading drawer drag listener so it don't interfere in our actions with the artifact
					sladingDrawer.setEnabled(false);
					Log.v("hola", "que hace");
				}
				//the timer for the long click is set in dispatchDragEvent on ACTION_DRAG_STARTED at Artifact class
			  break;
			case DragEvent.ACTION_DRAG_ENTERED:
			  break;
			  
			case DragEvent.ACTION_DRAG_EXITED:
			  break;
			case DragEvent.ACTION_DROP://when the artifact is droped somewhere
				startX = touchedArtifact.getX();
				startY = touchedArtifact.getY();
				if(v != owner){//if the drag and drop started at a SlideDrawer Artifact
					if(Global.exited){//Check if it has been dropped on the board(aca exited from the slading drawer)
						Artifact square = new Artifact(v.getContext());//then create a new Artifact at the main frame where it was dropped
						square.setType(touchedArtifact.getType());
				        RelativeLayout Rel = (RelativeLayout)v;
				        Rel.addView(square,100,100);
				        square.setPrevWidth(100);
				        square.setPrevHeight(100);
				        square.setX(event.getX()-50);
				        square.setY(event.getY()-50);
				        square.setTag("node");
				        square.setId(Global.ID);
				        Global.ID++;
				        square.seekFather(Rel,true);
				        if(square.getFathers().size()!=0){
				        	Artifact father = (Artifact)square.getFathers().get(0);
				        	square.setAge(father.getAge());
				        }
				        square.setBackgroundResource(Utility.getDrawableType(touchedArtifact));
				        Utility.recalculateLines(Rel);
				        Global.exited = false;
					}
					
				}else{//else means we want to move or long click the artifact
					RelativeLayout Rel = (RelativeLayout)v;
					if(System.currentTimeMillis()-Global.longClickTimer > 1000 && Math.abs(startX-event.getX()) < 300 && Math.abs(startY-event.getY()) < 300){//onlongClick artifacts event
						Intent toArtifactActivity = new Intent(Rel.getContext(), ArtifactActivity.class);
						toArtifactActivity.putExtra("id",touchedArtifact.getId());//pass of the artifact information to ArtifactActivity
						toArtifactActivity.putExtra("text",touchedArtifact.getText());
						toArtifactActivity.putExtra("age",touchedArtifact.getAge());
						toArtifactActivity.putExtra("type",touchedArtifact.getType());
						toArtifactActivity.putExtra("information",touchedArtifact.getInformation());
						toArtifactActivity.putExtra("position",touchedArtifact.getPosition());
						ArrayList <String> fathersText = new ArrayList<String>();
						ArrayList <String> fathersAges = new ArrayList <String>();
						for(int i=0;i<touchedArtifact.getFathers().size();i++){
							fathersText.add((String) touchedArtifact.getFathers().get(i).getText());
							fathersAges.add(""+touchedArtifact.getFathers().get(i).getAge());
						}
						toArtifactActivity.putStringArrayListExtra("father", fathersText);
						toArtifactActivity.putStringArrayListExtra("fathersAges", fathersAges);
						
						
						ArrayList <String> sonsText = new ArrayList<String>();
						ArrayList <String> sonsAges = new ArrayList<String>();
						for(int i=0;i<touchedArtifact.getSons().size();i++){
							sonsText.add((String) touchedArtifact.getSons().get(i).getText());
							sonsAges.add(""+touchedArtifact.getSons().get(i).getAge());
						}
						toArtifactActivity.putStringArrayListExtra("sons", sonsText);
						toArtifactActivity.putStringArrayListExtra("sonsAges", sonsAges);
						Activity a = (Activity)Rel.getContext();
						a.startActivityForResult(toArtifactActivity, 0);
					}else{//else we want to move the artifact
						int SeekFatherResult;
						touchedArtifact.setX(event.getX()-touchedArtifact.getWidth()/2);
						touchedArtifact.setY(event.getY()-touchedArtifact.getHeight()/2);
						SeekFatherResult = touchedArtifact.seekFather(Rel,false);
						if(SeekFatherResult == 0){//if the father found is compatible 
							Utility.recalculateLines(Rel);
							touchedArtifact.bringToFront();
						}else{
							AlertDialog.Builder alertDialog = new AlertDialog.Builder(touchedArtifact.getContext());
							alertDialog.setTitle("Illegal Move");
							if(SeekFatherResult == 1)//if the found father was already related 
								alertDialog.setMessage("You cannot put a node below another node already related to it at one of his branches");
							else if(SeekFatherResult == 2)//if the found father was older in age
								alertDialog.setMessage("You cannot put a node below another node older than him");
								
							alertDialog.setNeutralButton("OK", new DialogInterface.OnClickListener() {
								public void onClick(DialogInterface dialog, int which) {
								// here you can add functions
								}
							});
							alertDialog.show();
							touchedArtifact.setX(startX);
							touchedArtifact.setY(startY);
						}
						
					}
				}
	
			  break;
			case DragEvent.ACTION_DRAG_ENDED:
				Log.v("hola", "que hace");
				touchedArtifact.setEnabled(true);
			break;
				
			default:
			break;
			  
			  
		}
		return true;
			
	}


}

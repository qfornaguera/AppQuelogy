package com.example.appqueology;

import java.io.File;
import java.util.ArrayList;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;



import android.util.Log;
import android.widget.RelativeLayout;

public class XmlReadWriter {
	
	RelativeLayout Rel;
	
	public XmlReadWriter(RelativeLayout Rel) {
		// TODO Auto-generated constructor stub
		this.Rel = Rel;
	}
	
	public void ReadXML(String xml){
        Rel.removeAllViews();
		
		try {
        	File xmlFile = new File(xml);  
        	DocumentBuilderFactory documentFactory = DocumentBuilderFactory.newInstance();  
        	DocumentBuilder documentBuilder = documentFactory.newDocumentBuilder();  
        	Document doc = documentBuilder.parse(xmlFile);  
        	doc.getDocumentElement().normalize();
        	NodeList nodeList = doc.getElementsByTagName("node");
            
            
        }catch(Exception e){
        	Log.v("error reading xml",e.toString());
        }
	}
	
	public void WriteXML(String xml){
		try {
			
			
			DocumentBuilderFactory documentFactory = DocumentBuilderFactory.newInstance();  
			DocumentBuilder documentBuilder = documentFactory.newDocumentBuilder();  
			// define root elements  
			Document document = documentBuilder.newDocument();  
			Element rootElement = document.createElement("graph");  
			document.appendChild(rootElement);
			
			for(int i=0;i<Rel.getChildCount();i++){
				if(Rel.getChildAt(i).getTag() != null){
					if(Rel.getChildAt(i).getTag().toString().compareTo("node") == 0){
						Artifact artifact = (Artifact) Rel.getChildAt(i);
						Element node = addElement(rootElement, "node", document);
						Element id = addAttribute("id",artifact.getId()+"", document);  
						node.appendChild(id);
						if(artifact.getFather() == null)
						
						else
							Element father = addAttribute("father", artifact.getFather().getId()+"", document);
						ArrayList <Artifact> sons = artifact.getSons();
						for(int j=0;j<sons.size();j++){
							
						}
					}
				}
			}
			
			Element node = addElement(rootElement, "node", document);
		  
			Element id = addAttribute("id", "1", document);  
			node.appendChild(id);
            
            
        }catch(Exception e){
        	Log.v("error writing xml",e.toString());
        }
		
		
	}
	
	public Element addElement(Element rootElement,String type,Document document){
		// define school elements  
		Element node = document.createElement(type);  
		rootElement.appendChild(node);
		return node;
	}
	
	public Element addAttribute(String name,String value,Document document){
		Element attr = document.createElement(name);  
		attr.appendChild(document.createTextNode(value));
		return attr;
	}

}

package com.example.appqueology;

import java.util.ArrayList;

import android.support.v7.app.ActionBarActivity;
import android.support.v7.app.ActionBar;
import android.app.ActionBar.LayoutParams;
import android.graphics.Color;
import android.graphics.PointF;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.ScrollView;
import android.widget.TextView;
import android.os.Build;

public class TimeLineActivity extends ActionBarActivity {
	String [] BAChrist = {"B.C","A.C"};
	long max,min,off;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_time_line);
		min = -5000;
		max = 2000;
		off = 1000;
		RelativeLayout Rel = (RelativeLayout)findViewById(R.id.timelinebody);
		
		createTimeLaps(min,max,off);
		
		XmlReadWriter xml = new XmlReadWriter(Rel);
		xml.readXML(getFilesDir()+"graf.xml");
		
		initArtifactsToTimeLaps(Rel);
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {

		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.time_line, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// Handle action bar item clicks here. The action bar will
		// automatically handle clicks on the Home/Up button, so long
		// as you specify a parent activity in AndroidManifest.xml.
		int id = item.getItemId();
		if (id == R.id.action_settings) {
			return true;
		}
		return super.onOptionsItemSelected(item);
	}

	public void createTimeLaps(long minAge,long maxAge,long offset){
		int idCounter = -1;
		int AfterOrBeforeC1,AfterOrBeforeC2;
		TextView text;
		LinearLayout Lap;
		LinearLayout timeline = (LinearLayout)findViewById(R.id.timeline);
		ScrollView sv = new ScrollView(this);
		Lap = new LinearLayout(this);
		sv.addView(Lap);
		timeline.addView(sv);
		sv.getLayoutParams().height = LayoutParams.MATCH_PARENT;
		sv.getLayoutParams().width = LayoutParams.MATCH_PARENT;
		Lap.setId(idCounter);
		text = new TextView(this);
		text.setTextColor(Color.BLACK);
		text.setText("Unseted\n Age \nArtifacts");
		Lap.addView(text);
		idCounter--;
		
		for(long i=minAge;i<maxAge;i+=offset){
			if(i < 0){
				AfterOrBeforeC1 = 0;
			}else{
				AfterOrBeforeC1 = 1;
			}
			
			if(i+offset < 0){
				AfterOrBeforeC2 = 0;
			}else{
				AfterOrBeforeC2 = 1;
			}
			text = new TextView(this);
			sv = new ScrollView(this);
			Lap = new LinearLayout(this);
			if(i==0){
				i+=1;
				text.setText("From " + Math.abs(i) + " " + BAChrist[AfterOrBeforeC1] + "\n to \n"+ Math.abs(i-1+offset) + " " + BAChrist[AfterOrBeforeC2]);
				i-=1;
			}else if(i+offset == 0){
				i-=1;
				text.setText("From " + Math.abs(i+1) + " " + BAChrist[AfterOrBeforeC1] + "\n to \n"+ Math.abs(i+offset) + " " + BAChrist[AfterOrBeforeC2]);
				i+=1;
			}else{
				text.setTextColor(Color.BLACK);
				text.setText("From " + Math.abs(i) + " " + BAChrist[AfterOrBeforeC1] + "\n to \n"+ Math.abs(i+offset) + " " + BAChrist[AfterOrBeforeC2]);
			}
			timeline.addView(sv);
			Lap.addView(text);
			text.setTextColor(Color.BLACK);
			sv.addView(Lap);
			Lap.setId(idCounter);
			idCounter--;
			
		}
	}
	
	public void initArtifactsToTimeLaps(RelativeLayout Rel){
		ArrayList<Artifact> nodeList = new ArrayList<Artifact>();
		LinearLayout l;
		for(int i=0;i<Rel.getChildCount();i++){
			if(Rel.getChildAt(i).getTag() != null){
				if(Rel.getChildAt(i).getTag().toString().compareTo("node") == 0){//then we get all the artifact views of the board
					nodeList.add((Artifact)Rel.getChildAt(i));
				}
			}
			
		}
		
		for(int j=0;j<nodeList.size();j++){//then we iterate and create the lines between artifacts
			Artifact node = nodeList.get(j);
			Rel.removeView(node);
			if(node.getAge() == 0){
				l = (LinearLayout)findViewById(-1);
				l.addView(node);
			}else{
				long dist = Math.abs(max-min);
				int assignedTimeLap = (int) (dist % node.getAge() * -2);
				l = (LinearLayout)findViewById(assignedTimeLap);
				l.addView(node);
			}
		}
	}
}
